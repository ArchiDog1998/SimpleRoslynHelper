using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace SimpleRoslynHelper;

/// <summary>
/// The extensions for the <see cref="Microsoft.CodeAnalysis.CSharp.SyntaxFactory"/>
/// </summary>
public static class SyntaxFactory
{
    /// <summary>
    /// Add the comment
    /// </summary>
    /// <typeparam name="TNode"></typeparam>
    /// <param name="node"></param>
    /// <param name="comment"></param>
    /// <returns></returns>
    public static TNode WithXmlComment<TNode>(this TNode node, string comment)
        where TNode : SyntaxNode
    {
        return node.WithLeadingTrivia(TriviaList([Comment(comment)]));
    }

    /// <summary>
    /// Generate a node by the string.
    /// </summary>
    /// <typeparam name="TNode"></typeparam>
    /// <param name="code"></param>
    /// <returns></returns>
    public static TNode ParseSyntax<TNode>(string code) where TNode : MemberDeclarationSyntax
    {
        return (TNode)((CompilationUnitSyntax)ParseSyntaxTree(code).GetRoot()).Members[0];
    }

    /// <summary>
    /// Generate the basic namespace declaration.
    /// </summary>
    /// <param name="name"></param>
    /// <param name="comment"></param>
    /// <returns></returns>
    public static BaseNamespaceDeclarationSyntax NamespaceDeclaration(string name, string? comment = null)
    {
        var text = "// <auto-generated/>";
        if (comment != null)
        {
            text = "// <auto-generated>"
                + "\n" + comment.Leading("// ")
                + "\n// </auto-generated>";
        }

        return FileScopedNamespaceDeclaration(ParseName(name))
            .WithLeadingTrivia(TriviaList(
                Comment(text),
                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))));
    }

    #region Attribute
    /// <summary>
    /// 
    /// </summary>
    /// <param name="generator"></param>
    /// <returns></returns>
    public static AttributeListSyntax GeneratedCodeAttribute(Type generator)
    {
        return AttributeList(SingletonSeparatedList(Attribute(IdentifierName("global::System.CodeDom.Compiler.GeneratedCode"))
           .AddArgumentListArguments(
               AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(generator.FullName ?? generator.Name))),
               AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(generator.Assembly.GetName().Version?.ToString() ?? "1.0.0"))))));
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="description"></param>
    /// <returns></returns>
    public static AttributeSyntax DescriptionAttribute(string description)
    {
        var attributeArgument = AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(description)));
        return Attribute(IdentifierName("global::System.ComponentModel.Description"), AttributeArgumentList(SingletonSeparatedList(attributeArgument)));
    }
    #endregion

    #region Enum Member
    /// <summary>
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <param name="value"></param>
    /// <returns></returns>
    public static EnumMemberDeclarationSyntax EnumMember(string name, byte value)
    {
        return EnumMemberDeclaration(name)
            .WithEqualsValue(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(value))));
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <param name="value"></param>
    /// <returns></returns>
    public static EnumMemberDeclarationSyntax EnumMember(string name, ushort value)
    {
        return EnumMemberDeclaration(name)
            .WithEqualsValue(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(value))));
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <param name="value"></param>
    /// <returns></returns>
    public static EnumMemberDeclarationSyntax EnumMember(string name, uint value)
    {
        return EnumMemberDeclaration(name)
            .WithEqualsValue(EqualsValueClause(LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(value))));
    }
    #endregion
}
